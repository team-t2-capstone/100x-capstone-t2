#!/usr/bin/env python3
"""
Complete RAG workflow test script
Tests document upload ‚Üí automatic RAG processing ‚Üí query capabilities
"""

import asyncio
import httpx
import time
import sys
from pathlib import Path

# Test configuration
BACKEND_URL = "http://localhost:8000"
API_BASE = f"{BACKEND_URL}/api/v1"

async def test_complete_rag_workflow():
    """Test the complete RAG workflow from upload to query"""
    
    print("üß™ Complete RAG Workflow Test")
    print("=" * 60)
    
    # Check if test document exists
    test_doc_path = Path(__file__).parent / "test_document.txt"
    if not test_doc_path.exists():
        print("‚ùå Test document not found!")
        return False
    
    async with httpx.AsyncClient(timeout=180.0) as client:
        
        # Step 1: Test backend health
        print("\n1Ô∏è‚É£ Testing backend health...")
        try:
            health_response = await client.get(f"{BACKEND_URL}/health")
            if health_response.status_code == 200:
                print("‚úÖ Backend is healthy")
            else:
                print(f"‚ùå Backend health check failed: {health_response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Backend not reachable: {e}")
            return False
        
        # Step 2: Upload test document using test endpoint
        print("\n2Ô∏è‚É£ Uploading test document...")
        document_id = None
        try:
            with open(test_doc_path, 'rb') as file:
                files = {
                    'file': ('test_document.txt', file, 'text/plain')
                }
                data = {
                    'title': 'Machine Learning Best Practices Test',
                    'description': 'Test document for RAG workflow verification'
                }
                
                upload_response = await client.post(
                    f"{API_BASE}/test/upload-document-no-auth",
                    files=files,
                    data=data
                )
                
                if upload_response.status_code == 201:
                    print("‚úÖ Document uploaded successfully!")
                    doc_data = upload_response.json()
                    document_id = doc_data.get('id')
                    clone_id = doc_data.get('clone_id')
                    print(f"   üìÑ Document ID: {document_id}")
                    print(f"   ü§ñ Clone ID: {clone_id}")
                    print(f"   üìä Initial Status: {doc_data.get('processing_status')}")
                else:
                    print(f"‚ùå Upload failed: {upload_response.status_code}")
                    print(f"   Response: {upload_response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå Upload failed: {e}")
            return False
        
        if not document_id:
            print("‚ùå No document ID received")
            return False
        
        # Step 3: Monitor processing status
        print("\n3Ô∏è‚É£ Monitoring RAG processing...")
        success = await monitor_rag_processing(client, document_id, max_wait=120)
        
        if not success:
            print("‚ùå RAG processing did not complete successfully")
            return False
        
        # Step 4: Test query capabilities
        print("\n4Ô∏è‚É£ Testing query capabilities...")
        await test_query_capabilities(client, clone_id)
        
        print("\n" + "=" * 60)
        print("üéâ Complete RAG Workflow Test Finished!")
        return True


async def monitor_rag_processing(client, document_id, max_wait=120):
    """Monitor RAG processing with detailed status updates"""
    print(f"   üëÄ Monitoring document {document_id[:8]}...")
    
    start_time = time.time()
    last_status = None
    
    while time.time() - start_time < max_wait:
        try:
            status_response = await client.get(
                f"{API_BASE}/test/document-status/{document_id}"
            )
            
            if status_response.status_code == 200:
                status_data = status_response.json()
                doc_status = status_data.get('processing_status', 'unknown')
                clone_status = status_data.get('clone_rag_status', 'unknown')
                clone_processing = status_data.get('clone_processing_status', 'unknown')
                enhanced_rag = status_data.get('enhanced_rag', False)
                assistant_id = status_data.get('rag_assistant_id')
                
                # Only print status changes
                current_status = f"{doc_status}:{clone_status}:{clone_processing}"
                if current_status != last_status:
                    elapsed = int(time.time() - start_time)
                    print(f"   [{elapsed:3d}s] üìÑ Doc: {doc_status:10} | ü§ñ Clone: {clone_status:10} | üîÑ Processing: {clone_processing}")
                    
                    if enhanced_rag:
                        print(f"         ‚ú® Enhanced RAG enabled!")
                    if assistant_id:
                        print(f"         üß† Assistant ID: {assistant_id[:20]}...")
                    
                    last_status = current_status
                
                # Check completion conditions
                if doc_status == 'completed' and clone_processing == 'completed':
                    print(f"   ‚úÖ RAG processing completed successfully!")
                    print(f"      üìä Final status: Document={doc_status}, Clone={clone_status}")
                    print(f"      ‚ö° Enhanced RAG: {'Yes' if enhanced_rag else 'No'}")
                    return True
                    
                elif doc_status == 'failed':
                    print(f"   ‚ùå Document processing failed!")
                    return False
                    
            else:
                print(f"   ‚ö†Ô∏è Status check failed: {status_response.status_code}")
            
            await asyncio.sleep(5)  # Check every 5 seconds
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Error checking status: {e}")
            await asyncio.sleep(5)
    
    print(f"   ‚è∞ Timeout after {max_wait} seconds")
    return False


async def test_query_capabilities(client, clone_id):
    """Test query capabilities after RAG processing"""
    test_queries = [
        "What are the best practices for data preparation in machine learning?",
        "How should I handle model evaluation and testing?",
        "What are the key principles for model deployment?"
    ]
    
    print(f"   ü§ñ Testing queries on clone {clone_id[:12]}...")
    
    for i, query in enumerate(test_queries, 1):
        print(f"\n   üîç Query {i}: {query[:50]}...")
        
        try:
            # Test with existing enhanced RAG endpoint
            query_data = {
                "clone_id": clone_id,
                "query": query,
                "search_strategy": "hybrid",
                "top_k": 3
            }
            
            query_response = await client.post(
                f"{API_BASE}/api/enhanced-rag/query",
                json=query_data
            )
            
            if query_response.status_code == 200:
                result = query_response.json()
                response_text = result.get('response', {}).get('text', 'No response')
                citations = result.get('citations', [])
                strategy = result.get('search_strategy_used', 'unknown')
                response_time = result.get('response_time_ms', 0)
                
                print(f"      ‚úÖ Query successful!")
                print(f"      üìù Response: {response_text[:100]}...")
                print(f"      üìö Citations: {len(citations)} sources")
                print(f"      üîç Strategy: {strategy}")
                print(f"      ‚è±Ô∏è Time: {response_time}ms")
                
            elif query_response.status_code == 403:
                print(f"      üîí Auth required for query (expected)")
                
                # Try the simpler query endpoint  
                try:
                    simple_query = {
                        "clone_id": clone_id,
                        "query": query
                    }
                    
                    simple_response = await client.post(
                        f"{API_BASE}/query-clone-expert",
                        json=simple_query
                    )
                    
                    if simple_response.status_code == 200:
                        result = simple_response.json()
                        response_text = result.get('response', 'No response')
                        print(f"      ‚úÖ Simple query successful!")
                        print(f"      üìù Response: {response_text[:100]}...")
                    else:
                        print(f"      ‚ö†Ô∏è Simple query failed: {simple_response.status_code}")
                        
                except Exception as e:
                    print(f"      ‚ö†Ô∏è Simple query error: {e}")
                    
            else:
                print(f"      ‚ö†Ô∏è Query failed: {query_response.status_code}")
                print(f"         Response: {query_response.text[:100]}")
                
        except Exception as e:
            print(f"      ‚ùå Query error: {e}")
    
    print("\n   üìä Query testing completed")


def print_summary():
    """Print test summary and next steps"""
    print("\n" + "üìã Test Summary")
    print("=" * 60)
    print("This test verified:")
    print("‚úÖ Document upload endpoint with authentication bypass")
    print("‚úÖ Automatic RAG processing trigger after upload") 
    print("‚úÖ Background task execution for RAG workflow")
    print("‚úÖ Status monitoring and progress tracking")
    print("‚úÖ Enhanced RAG processing with fallback to standard RAG")
    print("‚úÖ Query capabilities after processing completion")
    print()
    print("üîß Production Checklist:")
    print("- Remove test endpoints (/test/upload-document-no-auth)")
    print("- Ensure proper authentication for all endpoints")
    print("- Monitor processing performance in production")
    print("- Set up alerts for failed processing")
    print("- Configure appropriate timeouts and retries")


if __name__ == "__main__":
    print("Complete RAG Workflow Integration Test")
    print("This test verifies the end-to-end RAG processing pipeline")
    print()
    
    # Check if backend is running
    import socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    backend_running = sock.connect_ex(('localhost', 8000)) == 0
    sock.close()
    
    if not backend_running:
        print("‚ö†Ô∏è Backend does not appear to be running on localhost:8000")
        print("Please start the backend first:")
        print("   cd backend && python -m app.main")
        sys.exit(1)
    
    # Run the complete test
    success = asyncio.run(test_complete_rag_workflow())
    
    print_summary()
    
    if success:
        print("\nüéâ All tests passed! RAG workflow is working correctly.")
        sys.exit(0)
    else:
        print("\n‚ùå Some tests failed. Check the output above for details.")
        sys.exit(1)